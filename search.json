[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science and Society with R",
    "section": "",
    "text": "Preliminaries\nThe notes were developed with Quarto; for details about Quarto, visit https://quarto.org/docs/books.\nThis book is free and is licensed under a Creative Commons Attribution-NonCommercial-NoDerivs 3.0 United States License.",
    "crumbs": [
      "Preliminaries"
    ]
  },
  {
    "objectID": "index.html#sources-at-github",
    "href": "index.html#sources-at-github",
    "title": "Data Science and Society with R",
    "section": "Sources at GitHub",
    "text": "Sources at GitHub\nThese lecture notes for STAT/DSDA 1010 in Fall 2025 are developed by Professor Jun Yan, with help from generative AI and the students enrolled in the course. This cooperative approach to education was facilitated through the use of GitHub, a platform that encourages collaborative coding and content development. To view these contributions and the lecture notes in their entirety, please visit our GitHub repository at https://github.com/statds/1010f25.\nStudents are welcome to contribute to the lecture notes by submitting pull requests to our GitHub repository. This method not only enriched the course material but also provided students with practical experience in collaborative software development and version control.",
    "crumbs": [
      "Preliminaries"
    ]
  },
  {
    "objectID": "index.html#adapting-to-rapid-skill-acquisition",
    "href": "index.html#adapting-to-rapid-skill-acquisition",
    "title": "Data Science and Society with R",
    "section": "Adapting to Rapid Skill Acquisition",
    "text": "Adapting to Rapid Skill Acquisition\nIn this course, students are expected to rapidly acquire new skills, a critical aspect of data science. To emphasize this, consider this insightful quote from VanderPlas (2016):\n\nWhen a technologically-minded person is asked to help a friend, family member, or colleague with a computer problem, most of the time it’s less a matter of knowing the answer as much as knowing how to quickly find an unknown answer. In data science it’s the same: searchable web resources such as online documentation, mailing-list threads, and StackOverflow answers contain a wealth of information, even (especially?) if it is a topic you’ve found yourself searching before. Being an effective practitioner of data science is less about memorizing the tool or command you should use for every possible situation, and more about learning to effectively find the information you don’t know, whether through a web search engine or another means.\n\nThis quote captures the essence of what we aim to develop in our students: the ability to swiftly navigate and utilize the vast resources available to solve complex problems in data science. Examples tasks are: install needed software (or even hardware); search and find solutions to encountered problems.",
    "crumbs": [
      "Preliminaries"
    ]
  },
  {
    "objectID": "index.html#course-tools",
    "href": "index.html#course-tools",
    "title": "Data Science and Society with R",
    "section": "Course Tools",
    "text": "Course Tools\n\nR & RStudio for analysis\nQuarto for reproducible documents and dashboards\nGit & GitHub for version control and project management\nCommand line for automation and efficiency",
    "crumbs": [
      "Preliminaries"
    ]
  },
  {
    "objectID": "index.html#policies-syllabus",
    "href": "index.html#policies-syllabus",
    "title": "Data Science and Society with R",
    "section": "Policies & Syllabus",
    "text": "Policies & Syllabus\nSee the course syllabus on HuskyCT.\nKey reminders: academic integrity, no AI-generated text in graded submissions, and professional email etiquette.\n\nGrading Rubics\nBaseline (C level work)\n\nYour .qmd file knits to HTML without errors.\nYou answer questions correctly but do not use complete sentences.\nThere are typos and ‘junk code’ throughout the document.\nYou do not put much thought or effort into the reflection answers.\nYou do not follow the good styles in using R, Quarto, and Git.\n\nAverage (B level work)\n\nYou use complete sentences to answer questions.\nYou attempt every exercise/question.\n\nAdvanced (A level work)\n\nYour code is simple and concise.\nUnnecessary messages from R are hidden from being displayed in the HTML.\nYour document is typo-free.\nYou practice all the good styles of using R, Quarto, and Git.\nAt the discretion of the instructor, you give exceptionally thoughtful or insightful responses.",
    "crumbs": [
      "Preliminaries"
    ]
  },
  {
    "objectID": "index.html#schedule-and-readings",
    "href": "index.html#schedule-and-readings",
    "title": "Data Science and Society with R",
    "section": "Schedule and Readings",
    "text": "Schedule and Readings\n\nComputing environment\n\nR4DS Ch 28-29\nHGR Ch 20-23\n\nJump start with R\n\nR4DS Ch 4-8; Ch 20-24\n\nVisualization\n\nR4DS Ch 1; Ch 9; Ch 11\nData visualization in R\n\n\n\n\n\n\nVanderPlas, J. (2016). Python data science handbook: Essential tools for working with data. O’Reilly Media, Inc.",
    "crumbs": [
      "Preliminaries"
    ]
  },
  {
    "objectID": "01-computing.html",
    "href": "01-computing.html",
    "title": "1  Setting up Computing Environment",
    "section": "",
    "text": "1.1 Operating Systems\nMost students are familiar with Windows, but data science workflows often run on macOS or Linux. To keep everyone on the same page for command-line work, we will treat macOS and Linux as a single “Unix-like” family and help Windows users bridge to the same environment via WSL (Windows Subsystem for Linux).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up Computing Environment</span>"
    ]
  },
  {
    "objectID": "01-computing.html#operating-systems",
    "href": "01-computing.html#operating-systems",
    "title": "1  Setting up Computing Environment",
    "section": "",
    "text": "Note\n\n\n\nWhat is an Operating System?\nAn operating system (OS) manages your computer’s resources (CPU, memory, storage, files, and processes) and provides interfaces (GUI and terminal) for people and programs to interact with hardware.\n\n\n\n1.1.1 The big three\n\nWindows — Ubiquitous on personal laptops; historically less aligned with Unix tooling, but excellent with WSL.\nmacOS — Unix-based; ships with a terminal and many developer tools out of the box.\nLinux — Open-source family used on servers, clusters, and cloud VMs; many distributions (Ubuntu, Fedora, Debian) share common command-line tools.\n\n\n\n\n\n\n\nTip\n\n\n\nWhy this matters in data science\nReproducibility and collaboration require knowing your OS, versions, and paths. Most research servers and HPC clusters run Linux. Learning a command-line interface (CLI) gives you a common language across systems.\n\n\n\n\n1.1.2 Quick checks: what am I running?\nOpen a terminal and run one of the following:\n# macOS / Linux / WSL\nuname -a\n# Windows (PowerShell)\nver\nIf you see Linux details on a Windows laptop, you are inside WSL.\n\n\n1.1.3 File systems and paths\n\nUnix-like path style: /home/alex/project/data.csv\nWindows path style: C:\\\\Users\\\\Alex\\\\project\\\\data.csv\n\nOn macOS/Linux, your home is typically /Users/&lt;name&gt; (macOS) or /home/&lt;name&gt; (Linux). On Windows, it is usually C:\\\\Users\\\\&lt;name&gt;.\n\n\n\n\n\n\nImportant\n\n\n\nNaming habits that save you pain\nAvoid spaces in file and folder names. Prefer kebab-case or snake-case. Keep a project’s scripts, data, and reports together.\n\n\n\n\n1.1.4 Windows Subsystem for Linux (WSL)\nWSL lets you run a real Linux environment (e.g., Ubuntu) inside Windows, so your terminal commands match those of macOS/Linux users. This is the recommended setup for Windows in this course.\n\n1.1.4.1 Install WSL (Windows 11 or Windows 10 ≥ 2004)\n\nOpen PowerShell as Administrator.\n\nRun:\n\nwsl --install\n\nWhen prompted, choose Ubuntu and set a Linux username and password.\n\n(Optional) Ensure WSL2 is the default:\n\nwsl --set-default-version 2\n\nVerify:\n\nwsl --status\nwsl -l -v\nYou should see Ubuntu listed and version 2.\n\n\n1.1.4.2 Start using WSL\n\nLaunch the Ubuntu app (or run wsl in PowerShell).\n\nYou are now at a Linux shell (bash). Try:\n\npwd         # current directory in the Linux filesystem\nls          # list files\nwhoami      # your Linux username\n\n\n1.1.4.3 Sharing files between Windows and WSL\n\nWindows drives are mounted inside Linux at /mnt/c, /mnt/d, …\nExample: C:\\\\Users\\\\Alex\\\\project appears at /mnt/c/Users/Alex/project inside WSL.\n\nYour Linux home is separate (e.g., /home/alex).\n\n\n\n\n\n\n\nTip\n\n\n\nBest practice\nKeep course projects inside your Linux home (e.g., /home/&lt;name&gt;/dsda1010) to avoid path and permissions surprises.\n\n\n\n\n1.1.4.4 Line endings and Git on Windows/WSL\nConfigure Git once to avoid CRLF/LF confusion:\ngit config --global core.autocrlf input   # recommended in WSL/macOS/Linux\ngit config --global init.defaultBranch main\nAdd a .gitattributes to normalize endings:\n* text=auto\n*.qmd text eol=lf\n*.R   text eol=lf\n*.md  text eol=lf\n*.yml text eol=lf\n\n\n\n1.1.5 Terminal quickstart by OS\n\nmacOS: Open Terminal (or iTerm2). You are in a Unix shell. Commands from the book work as-is.\n\nLinux: Open your terminal (GNOME Terminal, Konsole, etc.). You are already in a Unix shell.\n\nWindows (WSL): Open the Ubuntu app (WSL). You are now in a Linux shell that matches macOS/Linux.\n\nHere are several commonly used shell commands:\n\ncd: change directory; .. means parent directory.\npwd: present working directory.\nls: list the content of a folder; -l long version; -a show hidden files; -t ordered by modification time.\nmkdir: create a new directory.\ncp: copy file/folder from a source to a target.\nmv: move file/folder from a source to a target.\nrm: remove a file a folder.\n\n\n\n1.1.6 Common pitfalls and fixes\n\n“Command not found” — The program is not installed, or your PATH does not include it.\nPermission denied — You may be in a protected folder; work in your home directory.\nStrange characters in filenames — Avoid spaces and punctuation; stick to letters, numbers, dashes.\nMixing Windows and WSL paths — Prefer working inside your WSL home. If you must access Windows files, use /mnt/c/....\n\n\n\n1.1.7 Hands-on check (to do now)\n\nOpen your terminal (macOS/Linux/WSL).\n\nConfirm your OS with uname -a (or ver in PowerShell).\n\nCreate a course folder and a notes file:\n\nmkdir -p ~/dsda1010/week1\ncd ~/dsda1010/week1\necho \"Week 1 notes\" &gt; notes.txt\nls -l",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up Computing Environment</span>"
    ]
  },
  {
    "objectID": "01-computing.html#files-folders-and-paths",
    "href": "01-computing.html#files-folders-and-paths",
    "title": "1  Setting up Computing Environment",
    "section": "1.2 Files, folders, and paths",
    "text": "1.2 Files, folders, and paths\n\nHome folder: Your personal workspace.\n\nAbsolute vs relative paths:\n\n# absolute (macOS/Linux)\n/Users/alex/projects/dsda1010\n\n# absolute (Windows)\nC:\\Users\\alex\\projects\\dsda1010\n\n# relative (from a project root)\n../data/nyc311.csv\n\nGood habits\n\nAvoid spaces in file/folder names (use-kebab-case).\nKeep project files together (R scripts, data, and reports).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up Computing Environment</span>"
    ]
  },
  {
    "objectID": "01-computing.html#extensions-and-line-endings",
    "href": "01-computing.html#extensions-and-line-endings",
    "title": "1  Setting up Computing Environment",
    "section": "1.3 Extensions and line endings",
    "text": "1.3 Extensions and line endings\n\nCommon types: .qmd, .R, .csv, .tsv, .parquet, .md.\nText vs binary: keep data in text formats when possible.\nLine endings: Git normalizes these; we set .gitattributes to help.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up Computing Environment</span>"
    ]
  },
  {
    "objectID": "01-computing.html#terminals-and-shells",
    "href": "01-computing.html#terminals-and-shells",
    "title": "1  Setting up Computing Environment",
    "section": "1.4 Terminals and shells",
    "text": "1.4 Terminals and shells\nOpen a terminal and try:\npwd        # print working directory\nls         # list files\ncd ..      # move up one directory\nmkdir lab  # make a folder\ncd lab       # go into the newly created folder\n\n\n\n\n\n\nTip\n\n\n\nUse Tab to autocomplete file and folder names.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up Computing Environment</span>"
    ]
  },
  {
    "objectID": "01-computing.html#install-r-positron-or-rstudio-and-quarto",
    "href": "01-computing.html#install-r-positron-or-rstudio-and-quarto",
    "title": "1  Setting up Computing Environment",
    "section": "1.5 Install R, Positron (or RStudio), and Quarto",
    "text": "1.5 Install R, Positron (or RStudio), and Quarto\n\nInstall R from CRAN.\nInstall Positron or RStudio Desktop.\nInstall Quarto\nVerify:\n\nR --version\nquarto --version\nIn RStudio, create a new Quarto document and render it.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up Computing Environment</span>"
    ]
  },
  {
    "objectID": "01-computing.html#your-first-quarto-project",
    "href": "01-computing.html#your-first-quarto-project",
    "title": "1  Setting up Computing Environment",
    "section": "1.6 Your first Quarto project",
    "text": "1.6 Your first Quarto project\nFrom a terminal:\nmkdir dsda1010\ncd dsda1010\n# Edit hw-template.qmd\nquarto render hw-template.qmd\nOpen the folder in RStudio and inspect the generated files.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up Computing Environment</span>"
    ]
  },
  {
    "objectID": "01-computing.html#troubleshooting-checklist",
    "href": "01-computing.html#troubleshooting-checklist",
    "title": "1  Setting up Computing Environment",
    "section": "1.7 Troubleshooting checklist",
    "text": "1.7 Troubleshooting checklist\n\nPATH issues: can the terminal find R and quarto?\n\nPermissions: can you write to your project folder?\n\nAntivirus or VPN blocking downloads?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up Computing Environment</span>"
    ]
  },
  {
    "objectID": "02-git.html",
    "href": "02-git.html",
    "title": "2  Project Management with Git",
    "section": "",
    "text": "2.1 Install and configure Git",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Project Management with Git</span>"
    ]
  },
  {
    "objectID": "02-git.html#install-and-configure-git",
    "href": "02-git.html#install-and-configure-git",
    "title": "2  Project Management with Git",
    "section": "",
    "text": "2.1.1 Install Git\n\nmacOS: Install the Command Line Tools or use Homebrew.\n\n# Option A: Trigger Apple CLT install when you first run git\nxcode-select --install\n\n# Option B: Homebrew (preferred if you use brew)\nbrew install git\n\nWindows: Use Git for Windows (includes Git Bash) or enable WSL and install Git inside Ubuntu.\n\n# WSL (Ubuntu) inside Windows\nsudo apt update && sudo apt install -y git\n\nLinux:\n\nsudo apt update && sudo apt install -y git   # Debian/Ubuntu\n# or\nsudo dnf install -y git                       # Fedora\n\n\n2.1.2 Identify yourself to Git\nSet your name and email (must match the email used on GitHub for a clean history):\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"netid@uconn.edu\"\nOptional but recommended:\n# Show colored output and a friendlier log\ngit config --global color.ui auto\ngit config --global init.defaultBranch main\n\n# Better default editor (choose one you actually use)\n# git config --global core.editor \"code --wait\"   # VS Code\n\n\n2.1.3 Connect to GitHub: HTTPS vs SSH\n\nHTTPS + Personal Access Token (PAT): simplest to start; you paste a token when Git asks for a password.\n\nSSH keys: more convenient long-term (no token prompts). Recommended if you frequently push/pull.\n\n\n2.1.3.1 Create and add an SSH key\n# Generate a modern Ed25519 key\nssh-keygen -t ed25519 -C \"netid@uconn.edu\"\n# Press Enter to accept default path; set a passphrase when prompted\n\n# Start the agent and add your key\neval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_ed25519\n\n# Print the public key and copy it\ncat ~/.ssh/id_ed25519.pub\nIn GitHub: Settings → SSH and GPG keys → New SSH key → paste the public key.\nTest the connection:\nssh -T git@github.com\n# Expect: \"Hi &lt;username&gt;! You've successfully authenticated...\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Project Management with Git</span>"
    ]
  },
  {
    "objectID": "02-git.html#github-classroom-homework-workflow",
    "href": "02-git.html#github-classroom-homework-workflow",
    "title": "2  Project Management with Git",
    "section": "2.2 GitHub Classroom: homework workflow",
    "text": "2.2 GitHub Classroom: homework workflow\nYour instructor will share a GitHub Classroom invitation link. The link automatically creates a private repository for you.\n\n2.2.1 Accept and clone the repository\n\nOpen the invitation link and accept the assignment.\n\nAfter a minute, click into your created repo (e.g., dsda1010-hw01-&lt;username&gt;).\n\nClone it once to your computer:\n\n# Using SSH (recommended)\ngit clone git@github.com:course-org/dsda1010-hw01-&lt;username&gt;.git\n\n# or using HTTPS (you will use a PAT when prompted)\n# git clone https://github.com/course-org/dsda1010-hw01-&lt;username&gt;.git\nEnter the folder, inspect starter files:\ncd dsda1010-hw01-&lt;username&gt;\nls -la\nCopy the homework template to this folder and start working on it. Make commits at appropriate stops.\n\n\n\n\n\n\nTip\n\n\n\nPro tip: If the repo includes a Quarto project, you can render it locally with quarto render before committing.\n\n\n\n\n2.2.2 Make changes, commit, and push\n# Check the current status\ngit status\n\n# Stage a specific file, or use `.` to stage all changes\ngit add README.md\n\n# Write a clear, imperative commit message\ngit commit -m \"Complete Q1 and add explanation\"\n\n# Push your work to GitHub\ngit push origin main\nRepeat the edit → add → commit → push loop as you progress. Your latest push before the deadline is your submission.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Project Management with Git</span>"
    ]
  },
  {
    "objectID": "02-git.html#core-git-operations-you-will-use-often",
    "href": "02-git.html#core-git-operations-you-will-use-often",
    "title": "2  Project Management with Git",
    "section": "2.3 Core Git operations you will use often",
    "text": "2.3 Core Git operations you will use often\n\n2.3.1 Create or initialize a repository\n# Start a new repo in an existing folder\ngit init\n\n# Connect it to a new remote repository on GitHub\ngit remote add origin git@github.com:&lt;user&gt;/&lt;repo&gt;.git\n\n# First commit and push\ngit add .\ngit commit -m \"Initial commit\"\ngit push -u origin main\n\n\n2.3.2 Inspect history and changes\ngit status\n\n# What changed since the last commit?\ngit diff\n\n# What changed in staged files?\ngit diff --staged\n\n# View history (pretty)\ngit log --oneline --graph --decorate --all\n\n\n2.3.3 Branching\n# Create and switch to a new branch\ngit switch -c feature/q2-solution\n\n# List branches\ngit branch -vv\n\n# Switch back\ngit switch main\n\n\n2.3.4 Merging and fast-forwards\n# On main, merge your feature branch\ngit switch main\ngit merge feature/q2-solution\n\n# Delete the merged branch\ngit branch -d feature/q2-solution\n\n\n2.3.5 Rebasing (optional, but good to know)\n# Rebase your work on top of updated main\ngit fetch origin\ngit rebase origin/main\n\n\n2.3.6 Fixing mistakes\n# Unstage a file you just added\ngit restore --staged path/to/file\n\n# Discard local changes in a file (careful: destructive)\ngit restore path/to/file\n\n# Amend the last commit message (if not yet pushed)\ngit commit --amend -m \"Better message\"\n\n# Revert a bad commit by creating a new inverse commit\ngit revert &lt;commit-sha&gt;\n\n\n2.3.7 Handling merge conflicts (quick recipe)\n# After a merge or rebase reports conflicts\ngit status            # see which files conflict\n\n# Open conflicted files, look for &lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt;\n# Edit to the desired final content, then:\ngit add path/to/conflicted-file\n\ngit commit            # completes a merge\n# or if rebasing:\ngit rebase --continue\n\n\n2.3.8 .gitignore essentials\nCreate a .gitignore in the project root:\n# Editors & OS\n.DS_Store\n.vscode/\n.Rproj.user/\n\n# Build outputs\n*_cache/\n*.html\n*.pdf\n\n# Dependencies\n.Rhistory\n.venv/\n__pycache__/\n.ipynb_checkpoints/",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Project Management with Git</span>"
    ]
  },
  {
    "objectID": "02-git.html#command-line-operations-you-should-know",
    "href": "02-git.html#command-line-operations-you-should-know",
    "title": "2  Project Management with Git",
    "section": "2.4 Command-line operations you should know",
    "text": "2.4 Command-line operations you should know\n\nUse these across macOS, Linux, and WSL. On Windows Git Bash, equivalents mostly work too.\n\n\n2.4.1 Navigation & inspection\npwd            # print working directory\nls -la         # list all files with details\ncd path/dir    # change directory\ncat file.txt   # print file contents\nhead -n 20 f   # first 20 lines\ntail -n 20 f   # last 20 lines\n\n\n2.4.2 Files & folders\nmkdir data figures scripts\nmv oldname.txt newname.txt\ncp src.txt backup/src.txt\nrm -i unwanted.tmp      # -i asks before deleting\n\n# Create a new file quickly\necho \"Title\" &gt; README.md\n\n# Edit with a CLI editor (choose one you like)\nnano README.md\n# or\nvim README.md\n\n\n2.4.3 Search & find\ngrep -n \"pattern\" file.txt        # search within a file\nrg -n \"pattern\" .                  # ripgrep (if installed) across project\nfind . -name \"*.qmd\"              # find matching files\n\n\n2.4.4 Environment & tooling\n# Check versions\npython --version\nR --version\ngit --version\nquarto --version\n\n# (Optional) create a Python virtual environment\npython -m venv .venv\nsource .venv/bin/activate     # Windows: .venv\\Scripts\\activate\npip install -r requirements.txt",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Project Management with Git</span>"
    ]
  },
  {
    "objectID": "02-git.html#end-to-end-demo-script-copypaste",
    "href": "02-git.html#end-to-end-demo-script-copypaste",
    "title": "2  Project Management with Git",
    "section": "2.5 End-to-end demo script (copy/paste)",
    "text": "2.5 End-to-end demo script (copy/paste)\n# 0) Accept GitHub Classroom invite, then clone your repo\ncd ~/courses/dsda1010\ngit clone git@github.com:course-org/dsda1010-hw01-&lt;user&gt;.git\ncd dsda1010-hw01-&lt;user&gt;\n\n# 1) Create a working branch\ngit switch -c work/q1\n\n# 2) Edit files (use your editor), then stage & commit\necho \"My answer to Q1\" &gt; answers/q1.md\ngit add answers/q1.md\ngit commit -m \"Answer Q1\"\n\n# 3) Merge into main and push\ngit switch main\ngit merge work/q1\ngit push -u origin main\n\n# 4) Pull in any upstream updates (if configured)\ngit fetch upstream\n# Merge or rebase as instructed\ngit merge upstream/main\n\n# 5) Verify on GitHub: files, commits, and CI checks (if any)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Project Management with Git</span>"
    ]
  },
  {
    "objectID": "02-git.html#troubleshooting-faq",
    "href": "02-git.html#troubleshooting-faq",
    "title": "2  Project Management with Git",
    "section": "2.6 Troubleshooting FAQ",
    "text": "2.6 Troubleshooting FAQ\nGit asks for a password on HTTPS and rejects it\nCreate a Personal Access Token on GitHub and use that instead of a password, or switch to SSH.\n“Permission denied (publickey)” when using SSH\nYour key is not added or not uploaded. Run ssh-add ~/.ssh/id_ed25519 then add the public key to GitHub Settings.\n“fatal: not a git repository”\nRun commands inside a folder that contains a .git directory, or run git init to create one.\nLine endings (Windows vs Unix)\nSet git config --global core.autocrlf input (macOS/Linux) or true (Windows) to avoid noisy diffs.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Project Management with Git</span>"
    ]
  },
  {
    "objectID": "02-git.html#quick-reference-cheat-sheet",
    "href": "02-git.html#quick-reference-cheat-sheet",
    "title": "2  Project Management with Git",
    "section": "2.7 Quick reference (cheat sheet)",
    "text": "2.7 Quick reference (cheat sheet)\nstatus   → what changed\nadd      → stage changes\ncommit   → record staged snapshot\npush     → upload to remote\npull     → fetch + merge\nfetch    → download without merging\nswitch   → move between branches\nmerge    → combine histories\nrebase   → replay commits on a new base\nlog      → show history\nrestore  → discard or unstage changes\nrevert   → make an inverse commit\n\n\n\n\n\n\nImportant\n\n\n\nSubmission rule of thumb: If it is not pushed to GitHub by the deadline, it is not submitted.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Project Management with Git</span>"
    ]
  },
  {
    "objectID": "03-R.html",
    "href": "03-R.html",
    "title": "3  Jump Start with R",
    "section": "",
    "text": "3.1 Starting and Quitting R\nThis chapter gives you the minimum essentials to start using R comfortably. It assumes no prior knowledge and emphasizes good habits from the very beginning. We cover how to start and quit R, get help, understand core object types, subset objects, use basic control structures, manage your working directory, and write clean code.\nCode\n## End your R session programmatically\nq()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jump Start with R</span>"
    ]
  },
  {
    "objectID": "03-R.html#starting-and-quitting-r",
    "href": "03-R.html#starting-and-quitting-r",
    "title": "3  Jump Start with R",
    "section": "",
    "text": "Start Positron, open a folder as a project, and create a new script (.R) or Quarto document (.qmd).\nRun code by highlighting lines in the editor and pressing Ctrl-Enter (Win/Linux) or Cmd-Enter (Mac). The console runs one complete line at a time.\nQuit with:\n\n\n\nWhen asked to save the workspace, choose No. Rely on scripts for reproducibility.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jump Start with R</span>"
    ]
  },
  {
    "objectID": "03-R.html#positron-interface",
    "href": "03-R.html#positron-interface",
    "title": "3  Jump Start with R",
    "section": "3.2 Positron Interface",
    "text": "3.2 Positron Interface\nPositron is organized into panes and a sidebar.\n\nEditor pane: main area for .R and .qmd files; supports tabs.\nConsole: interactive R prompt for quick tests.\nTerminal: a shell for system commands (e.g., git, Rscript).\nFiles: browse, create, rename, and delete items.\nEnvironment: lists objects in memory; clear with care.\nSource control: stage, commit, and view diffs in git repos.\nCommand palette: Ctrl-Shift-P or Cmd-Shift-P to search commands.\nStatus bar: shows project folder and basic status.\n\nWorking in a project\n\nOpen a folder as the project root. Use relative paths from this root.\nKeep data in data/ and scripts in R/ or src/.\n\nRunning code\n\nRun the current line or selection with Ctrl/Cmd-Enter.\nExecute a full cell in a .qmd with the Run Cell button.\n\n\n\n\n\n\n\nTip\n\n\n\nKeep the Files and Console visible. Beginners benefit from constant feedback on where they are and what ran.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jump Start with R</span>"
    ]
  },
  {
    "objectID": "03-R.html#getting-help",
    "href": "03-R.html#getting-help",
    "title": "3  Jump Start with R",
    "section": "3.3 Getting Help",
    "text": "3.3 Getting Help\nR has built‑in help for every function. Every call or command you type is calling a function.\nSearch the help system on a topic:\nhelp.search(\"linear model\")\nGet the documentation of a function with known name:\n?mean\nhelp(mean)\nInspect arguments quickly for a function\n\n\nCode\nargs(mean)\n\n\nfunction (x, ...) \nNULL\n\n\nRun examples in the documentation (man page)\nexample(mean)\nPractice: find how sd() handles missing values.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jump Start with R</span>"
    ]
  },
  {
    "objectID": "03-R.html#objects-in-r",
    "href": "03-R.html#objects-in-r",
    "title": "3  Jump Start with R",
    "section": "3.4 Objects in R",
    "text": "3.4 Objects in R\nEverything you store is a vector or built from vectors. Length‑one values are still vectors.\nAtomic vector types (all of fixed type):\n\n\nCode\n## Atomic vectors (length one shown; still vectors)\nnum &lt;- 3.14      ## double (numeric)\nint &lt;- 2L        ## integer\nchr &lt;- \"Ann\"     ## character\nlgc &lt;- TRUE      ## logical\n\n## A longer vector (same type throughout)\nv &lt;- c(1, 2, 3)\n\n\nHigher‑level structures built from vectors:\n\n\nCode\n## Matrix/array: same type, 2D or more\nm &lt;- matrix(1:6, nrow = 2)\n\n## List: heterogenous elements\nlst &lt;- list(name = \"Bob\", age = 25, scores = c(90, 88))\n\n## Data frame: list of equal‑length columns\n## (columns can be different atomic types)\ndf &lt;- data.frame(name = c(\"Ann\", \"Bob\"), age = c(20, 25))\n\n## Function: also an object\nsq &lt;- function(x) x^2\n\n\nInspect objects:\n\n\nCode\n## Class and structure\nclass(df)\n\n\n[1] \"data.frame\"\n\n\nCode\nstr(df)\n\n\n'data.frame':   2 obs. of  2 variables:\n $ name: chr  \"Ann\" \"Bob\"\n $ age : num  20 25\n\n\n\n\n\n\n\n\nTip\n\n\n\nPrefer str(x) for a compact view of what an object contains, its type, and its sizes.\n\n\nExercise. Create one example of each object above and check with class() and str().",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jump Start with R</span>"
    ]
  },
  {
    "objectID": "03-R.html#subsetting",
    "href": "03-R.html#subsetting",
    "title": "3  Jump Start with R",
    "section": "3.5 Subsetting",
    "text": "3.5 Subsetting\nUse bracket notation consistently.\n\n\nCode\n## Vectors\nx &lt;- c(2, 4, 6, 8)\nx[2]             ## second element\n\n\n[1] 4\n\n\nCode\nx[1:3]           ## slice\n\n\n[1] 2 4 6\n\n\nCode\nx[x &gt; 5]         ## logical filter\n\n\n[1] 6 8\n\n\nCode\n## Matrices\nm &lt;- matrix(1:9, nrow = 3)\nm[2, 3]          ## row 2, col 3\n\n\n[1] 8\n\n\nCode\nm[, 1]           ## first column\n\n\n[1] 1 2 3\n\n\nCode\n## Data frames\npeople &lt;- data.frame(name = c(\"Ann\", \"Bob\"), age = c(20, 25))\npeople$age       ## column by name\n\n\n[1] 20 25\n\n\nCode\npeople[1, ]      ## first row\n\n\n\n  \n\n\n\nCode\npeople[, \"name\"] ## column by string\n\n\n[1] \"Ann\" \"Bob\"",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jump Start with R</span>"
    ]
  },
  {
    "objectID": "03-R.html#control-structures",
    "href": "03-R.html#control-structures",
    "title": "3  Jump Start with R",
    "section": "3.6 Control Structures",
    "text": "3.6 Control Structures\n\n3.6.1 If statement (missing‑value cleaning)\n\n\nCode\n## Replace sentinel values with NA\nx &lt;- -999\nif (x == -999) {\n  x &lt;- NA\n}\nprint(x)\n\n\n[1] NA\n\n\n\n\n3.6.2 For loop (column‑wise cleaning and summary)\nUseful when applying a simple rule across columns.\n\n\nCode\n## Make a toy data frame with a sentinel value\nscores &lt;- data.frame(\n  math = c(95, -999, 88, 91),\n  eng  = c(87, 90, -999, 85),\n  sci  = c(92, 88, 94, -999)\n)\n\n## Replace -999 with NA, then compute column means\nfor (col in names(scores)) {\n  ## clean\n  bad &lt;- scores[[col]] == -999\n  scores[[col]][bad] &lt;- NA\n  ## summarize\n  m &lt;- mean(scores[[col]], na.rm = TRUE)\n  cat(col, \"mean:\", m, \"\\n\")\n}\n\n\nmath mean: 91.33333 \neng mean: 87.33333 \nsci mean: 91.33333 \n\n\n\n\n3.6.3 While loop (simulation until tolerance met)\nStop when an estimate is precise enough.\n\n\nCode\n## Estimate P(X &gt; 1.96) for N(0,1) via Monte Carlo\n## Stop when stderr &lt; 0.002\nset.seed(1)\ncount &lt;- 0\nn &lt;- 0\nse &lt;- Inf\n\nwhile (se &gt; 0.002) {\n  ## simulate in small batches for responsiveness\n  z &lt;- rnorm(1000)\n  n &lt;- n + length(z)\n  count &lt;- count + sum(z &gt; 1.96)\n  p_hat &lt;- count / n\n  se &lt;- sqrt(p_hat * (1 - p_hat) / n)\n}\n\ncat(\"p_hat:\", p_hat, \"n:\", n, \"se:\", se, \"\\n\")\n\n\np_hat: 0.0285 n: 8000 se: 0.001860368 \n\n\nExercise. Write a loop that, for each numeric column in a frame, replaces -999 with NA, then reports the fraction of missing values.\n\n\n\n\n\n\nWarning\n\n\n\nLoops are fine for clarity. Later you will see vectorized and apply‑family solutions that are faster and shorter.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jump Start with R</span>"
    ]
  },
  {
    "objectID": "03-R.html#workflow-basics",
    "href": "03-R.html#workflow-basics",
    "title": "3  Jump Start with R",
    "section": "3.7 Workflow Basics",
    "text": "3.7 Workflow Basics\n\n\nCode\n## Working directory\ngetwd()                  ## where am I\n\n\n[1] \"/Users/junyan/work/teaching/1010-f25/1010f25\"\n\n\nCode\n## setwd(\"path/to/folder\")   ## set if necessary\n\n\n\nIn Positron, confirm the directory in the Files pane.\nUse the console for quick tests; save work in scripts or .qmd.\nRun highlighted code with Ctrl/Cmd-Enter.\n\n\n\n\n\n\n\nTip\n\n\n\nUse project‑relative paths and file.path() to build paths. This keeps code portable across operating systems.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jump Start with R</span>"
    ]
  },
  {
    "objectID": "03-R.html#importing-data",
    "href": "03-R.html#importing-data",
    "title": "3  Jump Start with R",
    "section": "3.8 Importing Data",
    "text": "3.8 Importing Data\nR can load data from text files and many other formats.\n\n3.8.1 Base R functions\n\n\nCode\n## Read a CSV file (comma-separated)\ncars &lt;- read.csv(\"data/india.csv\")\n\n## Read a general table with custom separators\nsurvey &lt;- read.table(\"data/survey.txt\", header = TRUE, sep = \" \")\n\n\nArguments to know: - header = TRUE tells R the first row has column names. - sep controls the separator (“,” for CSV, ” ” for tab‑delimited).\n\n\n\n\n\n\nTip\n\n\n\nCheck the imported object with str() or head() immediately to ensure it loaded as expected.\n\n\n\n\n3.8.2 Other formats\nThe foreign package imports legacy statistical software formats (SAS, SPSS, Stata):\n\n\nCode\nlibrary(foreign)\ndata_spss &lt;- read.spss(\"data/study.sav\", to.data.frame = TRUE)\ndata_stata &lt;- read.dta(\"data/study.dta\")\n\n\nMore modern workflows often use the haven package (part of the tidyverse) for these formats, but foreign is available in base R distributions.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jump Start with R</span>"
    ]
  },
  {
    "objectID": "03-R.html#good-style",
    "href": "03-R.html#good-style",
    "title": "3  Jump Start with R",
    "section": "3.9 Good Style",
    "text": "3.9 Good Style\nAdopt consistent style early. Follow the tidyverse guide: https://style.tidyverse.org/\n\nUse &lt;- for assignment.\nPlace spaces around operators and after commas.\nChoose meaningful names; avoid one‑letter names for data.\nBegin scripts with a header block.\n\n\n\nCode\n## Your Name\n## 2025-09-02\n## Purpose: demonstrate basic R style\nx &lt;- 1  # inline note uses a single \n\n\n\n\n\n\n\n\nNote\n\n\n\nComment convention. Start‑of‑line comments use at least two hashes (##). Reserve a single # for end‑of‑line notes.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jump Start with R</span>"
    ]
  },
  {
    "objectID": "03-R.html#tips-and-pitfalls",
    "href": "03-R.html#tips-and-pitfalls",
    "title": "3  Jump Start with R",
    "section": "3.10 Tips and Pitfalls",
    "text": "3.10 Tips and Pitfalls\n\nCase sensitivity: x and X are different.\nPaths: forward slashes / work on all platforms in R.\n\n\n\nCode\n## Portable path building\nfile.path(\"data\", \"mtcars.csv\")\n\n\n[1] \"data/mtcars.csv\"\n\n\n\nNumerical precision:\n\n\n\nCode\n## Floating‑point comparison\n0.1 == 0.3 / 3\n\n\n[1] FALSE\n\n\nCode\nall.equal(0.1, 0.3 / 3)\n\n\n[1] TRUE\n\n\nCode\n## Reveal stored value with extra digits\nprint(0.1, digits = 20)\n\n\n[1] 0.10000000000000000555\n\n\nCode\nsprintf(\"%.17f\", 0.1)\n\n\n[1] \"0.10000000000000001\"\n\n\n\n\n\n\n\n\nTip\n\n\n\nUse all.equal() (or an absolute/relative tolerance) rather than == for real‑number comparisons.\n\n\n\nSave code in scripts, not the workspace.\nUse simple file names: letters, numbers, underscores.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jump Start with R</span>"
    ]
  },
  {
    "objectID": "03-R.html#wrapup-checklist",
    "href": "03-R.html#wrapup-checklist",
    "title": "3  Jump Start with R",
    "section": "3.11 Wrap‑Up Checklist",
    "text": "3.11 Wrap‑Up Checklist\nYou should now be able to:\n\nStart and quit R in Positron.\nGet help with functions.\nRecognize and inspect core objects with class() and str().\nSubset vectors, matrices, and data frames.\nUse if, for, and while in useful contexts.\nManage your working directory and paths.\nWrite clean, consistent code and comments.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jump Start with R</span>"
    ]
  },
  {
    "objectID": "04-encounter.html",
    "href": "04-encounter.html",
    "title": "4  First Impression with Data",
    "section": "",
    "text": "4.1 R Packages and Data\nR is an open-source language, widely used in data science. One of its greatest strengths is the ecosystem of packages developed by the community. These packages make it easier to perform tasks such as importing data, cleaning it, and creating visualizations.\nTwo sets of packages will be central for us. Package tidyverse provides a coherent framework for data wrangling and visualization. The gapminder package offers a dataset on life expectancy, GDP per capita, and population across countries and years, which will serve as a running example in our practice.\nIf packages are not already installed, we can add them to our system with install.packages(). Installation is needed only once, but packages must be loaded every time we start a new R session.\nCode\ninstall.packages(\"tidyverse\")\ninstall.packages(\"gapminder\")\nOnce installed, packages are made available in a session by loading them with library().\nCode\nlibrary(tidyverse)\nlibrary(gapminder)\nAfter loading a dataset, it is good practice to examine its structure. Functions such as str() and summary() provide a quick overview of variable types, sample values, and ranges.\nCode\nstr(gapminder)\n\n\ntibble [1,704 × 6] (S3: tbl_df/tbl/data.frame)\n $ country  : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n\n\nCode\nsummary(gapminder)\n\n\n        country        continent        year         lifeExp     \n Afghanistan:  12   Africa  :624   Min.   :1952   Min.   :23.60  \n Albania    :  12   Americas:300   1st Qu.:1966   1st Qu.:48.20  \n Algeria    :  12   Asia    :396   Median :1980   Median :60.71  \n Angola     :  12   Europe  :360   Mean   :1980   Mean   :59.47  \n Argentina  :  12   Oceania : 24   3rd Qu.:1993   3rd Qu.:70.85  \n Australia  :  12                  Max.   :2007   Max.   :82.60  \n (Other)    :1632                                                \n      pop              gdpPercap       \n Min.   :6.001e+04   Min.   :   241.2  \n 1st Qu.:2.794e+06   1st Qu.:  1202.1  \n Median :7.024e+06   Median :  3531.8  \n Mean   :2.960e+07   Mean   :  7215.3  \n 3rd Qu.:1.959e+07   3rd Qu.:  9325.5  \n Max.   :1.319e+09   Max.   :113523.1",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>First Impression with Data</span>"
    ]
  },
  {
    "objectID": "04-encounter.html#exploring-data-frames-in-r",
    "href": "04-encounter.html#exploring-data-frames-in-r",
    "title": "4  First Impression with Data",
    "section": "4.2 Exploring Data Frames in R",
    "text": "4.2 Exploring Data Frames in R\nOnce data are loaded, the next step is to explore and understand the dataset. A data frame (or tibble, in tidyverse) is the standard format for rectangular data. R provides many built-in functions to examine, summarize, and manipulate data frames.\n\n4.2.1 Structure and dimensions\n\ndim(df) – number of rows and columns\n\nnrow(df), ncol(df) – number of rows or columns separately\n\nstr(df) – internal structure (types, first few values)\n\nglimpse(df) (from dplyr) – a cleaner version of str\n\n\n\n4.2.2 Column names and metadata\n\nnames(df) or colnames(df) – list column names\n\nrownames(df) – list row names (rarely used in tidy data)\n\n\n\n4.2.3 First and last rows\n\nhead(df) – first six rows\n\ntail(df) – last six rows\n\n\n\n4.2.4 Summaries\n\nsummary(df) – variable-by-variable summaries\n\nsapply(df, class) – variable types\n\nsapply(df, function) – apply any function to each column (e.g., mean, min, max)\n\n\n\n4.2.5 Accessing columns and rows\n\ndf$var – access a column by name\n\ndf[ , \"var\"] – same as above, but more general\n\ndf[1:5, ] – first five rows\n\ndf[ , 1:3] – first three columns\n\n\n\n4.2.6 Subsetting and filtering\n\nsubset(df, condition) – filter rows by condition\n\nWith tidyverse: filter(df, condition), select(df, cols)\n\n\n\n4.2.7 Checking contents\n\nunique(df$var) – unique values in a column\n\ntable(df$var) – frequency counts\n\nis.na(df) – identify missing values\n\nTogether, these functions give a toolkit for becoming familiar with any new dataset.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>First Impression with Data</span>"
    ]
  },
  {
    "objectID": "04-encounter.html#variable-types",
    "href": "04-encounter.html#variable-types",
    "title": "4  First Impression with Data",
    "section": "4.3 Variable Types",
    "text": "4.3 Variable Types\nA crucial step in working with data is recognizing the types of variables. Variable types determine how we visualize, summarize, and analyze data.\nVariables are broadly divided into numerical and categorical. Numerical variables can be continuous, such as income or life expectancy, or discrete, such as the number of siblings or a graduation year. Categorical variables can be nominal, with no inherent order (for example, country or gender), or ordinal, with an order that matters (such as education levels or rankings). R also provides support for logical variables, representing true/false values, and date variables, with built-in functions for handling time information.\n\n\n\nVariable types\n\n\n\n\nCode\n# Example: variable types in gapminder\nglimpse(gapminder)\n\n\nRows: 1,704\nColumns: 6\n$ country   &lt;fct&gt; \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", …\n$ continent &lt;fct&gt; Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, …\n$ year      &lt;int&gt; 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, …\n$ lifeExp   &lt;dbl&gt; 28.801, 30.332, 31.997, 34.020, 36.088, 38.438, 39.854, 40.8…\n$ pop       &lt;int&gt; 8425333, 9240934, 10267083, 11537966, 13079460, 14880372, 12…\n$ gdpPercap &lt;dbl&gt; 779.4453, 820.8530, 853.1007, 836.1971, 739.9811, 786.1134, …\n\n\nUnderstanding variable types is not just theoretical. The type guides decisions about visualization, statistical summaries, and models. For instance, the mean is meaningful for a numerical variable but not for a nominal one.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>First Impression with Data</span>"
    ]
  },
  {
    "objectID": "04-encounter.html#messy-data",
    "href": "04-encounter.html#messy-data",
    "title": "4  First Impression with Data",
    "section": "4.4 Messy Data",
    "text": "4.4 Messy Data\nReal-world datasets are rarely clean. Messiness can arise from missing values, inconsistent formats, poorly named variables, or categories coded in multiple ways. Dates might appear in different styles, proper nouns might be inconsistently capitalized, and numeric values might be stored as text.\nCleaning data involves identifying and fixing these problems. R provides many tools for this work. Missing values can be detected with is.na() and handled using functions such as na.omit(). Variable names can be adjusted with rename(). The mutate() function can change types or create new variables, and joins such as left_join() allow information from multiple tables to be combined.\n\n\nCode\n# Example: identify missing values in gapminder\nsum(is.na(gapminder))\n\n\n[1] 0\n\n\nThe tidyverse philosophy emphasizes keeping data in a “tidy” format, where each variable is a column, each observation is a row, and each type of observation forms its own table. Working toward tidy data makes later analysis and visualization much easier.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>First Impression with Data</span>"
    ]
  },
  {
    "objectID": "04-encounter.html#putting-it-together",
    "href": "04-encounter.html#putting-it-together",
    "title": "4  First Impression with Data",
    "section": "4.5 Putting It Together",
    "text": "4.5 Putting It Together\nTo see these ideas in practice, consider analyzing life expectancy in African countries. We might start by filtering the data to include only Africa, checking for missing values, and confirming variable types. Once the data are tidy, we can compute summaries and produce visualizations that reveal patterns over time.\n\n\nCode\nafrica &lt;- gapminder %&gt;% filter(continent == \"Africa\")\nhead(africa)\n\n\n\n  \n\n\n\nThis example illustrates the general workflow: install and load packages, import data, understand variable types, clean messy data, and prepare the dataset for analysis.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>First Impression with Data</span>"
    ]
  },
  {
    "objectID": "05-visual.html",
    "href": "05-visual.html",
    "title": "5  Data Visualization",
    "section": "",
    "text": "5.1 Base R Graphics: plot()\nData visualization is one of the most powerful tools in the data scientist’s toolbox. Visuals allow us to quickly summarize complex data, spot trends and outliers, and communicate results to both technical and non-technical audiences. A good visualization can illuminate patterns that might remain hidden in tables or numerical summaries, while a poor visualization can obscure the truth or even mislead. In this chapter, we explore both base R graphics and the ggplot2 package, emphasizing good practices and illustrating common pitfalls. We will also critique real world examples of misleading charts and learn how to improve them.\nR has a built-in graphics system that allows us to create plots quickly. The plot() function is versatile: depending on the type of data it is given, it can produce scatterplots, line plots, or even factor-based displays. This makes plot() an excellent starting point for beginners.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "05-visual.html#base-r-graphics-plot",
    "href": "05-visual.html#base-r-graphics-plot",
    "title": "5  Data Visualization",
    "section": "",
    "text": "5.1.1 Scatterplot\nScatterplots display the relationship between two continuous variables. In the example below, we investigate how car weight relates to fuel efficiency using the built-in mtcars dataset.\n\n\nCode\n### simple scatter using built-in `mtcars`\nplot(mtcars$wt, mtcars$mpg,\n     main = \"Fuel efficiency vs. weight\",\n     xlab = \"Weight (1000 lbs)\", ylab = \"MPG\",\n     pch = 19, col = \"steelblue\")\n\n\n\n\n\n\n\n\n\n\n\n5.1.2 Line plot\nWhen data are ordered, such as time series or physical measurements, line plots are appropriate. The following plot shows how pressure changes with temperature.\n\n\nCode\n## line plot via type='l'\nplot(pressure$temperature, pressure$pressure,\n     type = \"l\", lwd = 2,\n     main = \"Pressure vs. Temperature\",\n     xlab = \"Temperature\", ylab = \"Pressure\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTip. Use options like pch, col, cex, and type to control appearance in base graphics. These adjustments can make exploratory plots more readable and more informative.\n\n\nBase R graphics are quick and convenient, but they can be inconsistent and limited when creating complex or publication-quality graphics. This motivates the use of a more systematic framework.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "05-visual.html#ggplot2-basics-and-your-original-chunks",
    "href": "05-visual.html#ggplot2-basics-and-your-original-chunks",
    "title": "5  Data Visualization",
    "section": "5.2 ggplot2 Basics and Your Original Chunks",
    "text": "5.2 ggplot2 Basics and Your Original Chunks\nAlthough base R allows us to make plots quickly, its commands are not always consistent, and combining multiple layers can be challenging. This is where the Grammar of Graphics comes in (Wilkinson, 1999). The the strongest reason is that grammar teaches you to think systematically about how graphics are constructed, not just how to make a specific chart.\nThat means instead of thinking “I want a scatterplot” or “I want a bar chart,” you think in terms of layers of grammar:\n\nData: what dataset to use.\nAesthetics: how variables map to visual properties (x, y, color, size, etc.).\nGeoms: what geometric objects to draw (points, lines, bars).\nStats: statistical transformations (counts, smoothing, regression fits).\nScales: how data values are translated into colors, axes, and sizes.\nFacets: how to split data into subplots for comparison.\nThemes: the non-data ink (fonts, grid lines, background).\n\nThe ggplot2package (Wickham, 2016) implements this grammar, making it possible to build complex visualizations piece by piece. Because of this structure, ggplot2 is:\n\nConsistent: once you know the grammar, you can build almost any plot without learning a new function each time.\nExtensible: the same framework supports extensions (e.g., gganimate, ggrepel, patchwork).\nReproducible: code expresses the intent clearly, which is especially useful for teaching and communication.\n\nThe syntax involves calling ggplot() with a dataset and aesthetic mappings (via aes()), then adding layers such as geom_point() or geom_line() with the + operator. Additional layers for smoothing, faceting, and themes give us rich control over the appearance of plots.\nFor more syntax, see ggplot Cheatsheet\n\n5.2.0.1 Exploring the mpg dataset\nWe begin by loading the tidyverse, which includes ggplot2, and looking at the mpg dataset.\n\n\nCode\nlibrary(tidyverse)\n\nmpg\n\n\n\n  \n\n\n\nHere, mpg is a data frame containing information on car models, including engine displacement, highway mileage, and class.\n\n\nCode\nglimpse(mpg)\nView(mpg)\n?mpg\n\n\nThe functions glimpse() and View() allow us to quickly inspect the structure of the dataset, while ?mpg shows documentation.\n\n\n5.2.0.2 First ggplot calls\nBefore plotting, we might check available geoms:\n\n\nCode\n?ggplot\n?geom_point\n?geom_line\n\n\n\n\n5.2.0.3 Using pipes\nPipes make code easier to read by passing the result of one expression into the next. Instead of nesting functions, we can write a sequence of operations in the order we think about them. There are two main pipes in R: the base R pipe |&gt; (available since R 4.1) and the magrittr pipe %&gt;% (commonly used in the tidyverse).\nBoth pipes take the left-hand side and feed it into the first argument of the right-hand side.\n\n\nCode\n# Base R pipe\nmpg |&gt; head()\n\n\n\n  \n\n\n\nCode\n# Magrittr pipe (needs library(magrittr) or tidyverse)\nmpg %&gt;% head()\n\n\n\n  \n\n\n\nWe can now create a basic scatterplot of engine displacement vs highway mileage.\n\n\nCode\nmpg |&gt;\n  ggplot() +\n  geom_point(aes(displ, hwy))\n\n\nThis produces a scatterplot with displ on the x-axis and hwy on the y-axis. Swapping the variables simply flips the axes:\n\n\nCode\nmpg |&gt;\n  ggplot() +\n  geom_point(aes(hwy, displ))\n\n\n\n\n5.2.0.4 Building layers\nWe can add additional layers. For example, combining points with a line layer:\n\n\nCode\nmpg %&gt;%\n  ggplot() + \n  geom_point(aes(displ, hwy)) +\n  geom_line(aes(displ, hwy), color = \"tomato\")\n\n\n\n\n5.2.0.5 Adding aesthetics\nColor can highlight categories such as car class:\n\n\nCode\nmpg %&gt;%\n  ggplot() + \n  geom_point(aes(displ, hwy, color = class))\n\n\n\n\n5.2.0.6 Adding smoothers\nA smoothing curve helps reveal overall trends.\n\n\nCode\nmpg %&gt;%\n  ggplot() +\n  geom_point(aes(displ, hwy, color = class)) +\n  geom_smooth(aes(displ, hwy))\n\n\nThemes can alter the look of the plot:\n\n\nCode\nmpg %&gt;%\n  ggplot() +\n  geom_point(aes(displ, hwy, color = class)) +\n  geom_smooth(aes(displ, hwy)) +\n  theme_bw()\n\n\n\n\n5.2.0.7 Customization\nWe can set fixed aesthetics outside aes():\n\n\nCode\nmpg %&gt;%\n  ggplot(aes(displ, hwy)) + \n  geom_point(color = \"steelblue\", size = 3)\n\n\nTransparency can improve clarity:\n\n\nCode\nmpg %&gt;%\n  ggplot(aes(displ, hwy, color = class)) +\n  geom_point(size = 2, alpha = 0.8)\n\n\n\n\n5.2.0.8 Adding regression lines\nWe can fit smoothers with different methods:\n\n\nCode\nmpg %&gt;%\n  ggplot(aes(displ, hwy)) +\n  geom_point(aes(color = class)) +\n  geom_smooth(se = FALSE)\n\n\n\n\nCode\nmpg %&gt;%\n  ggplot(aes(displ, hwy)) +\n  geom_point(aes(color = class)) +\n  geom_smooth(method = \"lm\", se = FALSE)\n\n\n\n\n5.2.0.9 Titles, labels, and themes\n\n\nCode\nmpg %&gt;%\n  ggplot(aes(displ, hwy, color = class)) +\n  geom_point(size = 2) +\n  labs(\n    title = \"Fuel efficiency vs. engine displacement\",\n    x = \"Engine displacement (liters)\",\n    y = \"Highway MPG\"\n  ) +\n  theme_minimal()\n\n\n\n\n5.2.0.10 Faceting\nWe can split data into subplots by categories.\n\n\nCode\nmpg %&gt;%\n  ggplot(aes(displ, hwy, color = class)) +\n  geom_point(size = 2) +\n  facet_wrap(~ class)\n\n\n\n\nCode\nmpg %&gt;%\n  ggplot(aes(displ, hwy)) +\n  geom_point() +\n  facet_grid(drv ~ cyl)\n\n\n\n\n5.2.0.11 Other plot types\nBar charts summarize categorical data:\n\n\nCode\nmpg %&gt;%\n  ggplot(aes(class)) +\n  geom_bar()\n\n\nHistograms show distributions:\n\n\nCode\nmpg %&gt;%\n  ggplot(aes(hwy)) +\n  geom_histogram(bins = 20)\n\n\nDensity plots are another way to display distributions:\n\n\nCode\nmpg %&gt;%\n  ggplot(aes(hwy)) +\n  geom_density()\n\n\n\n\n5.2.0.12 Other ggplot functions\n\ncoord_flip flips the x and y axis to improve the readability of plots\nscales change the formatting of x and y axes\nplotly makes plots interactive; you can hover over points/lines for more information\nlabs allows you to add/edit a title, subtitle, a caption, and change the x and y axis labels\ngganimate allows you to animate plots into gifs",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "05-visual.html#misleading-charts",
    "href": "05-visual.html#misleading-charts",
    "title": "5  Data Visualization",
    "section": "5.3 Misleading Charts",
    "text": "5.3 Misleading Charts\nVisualizations can be abused to mislead. It is important to learn how to critically assess charts we see in the media. The following real-world examples show common problems and better alternatives.\n\n5.3.1 Example 1: Truncated Bar Chart\n\n\nCode\napproval &lt;- data.frame(year = c(2000, 2005), percent = c(77, 65))\nbarplot(approval$percent, names.arg = approval$year,\n        ylim = c(60, 80), col = \"tomato\",\n        main = \"Approval Ratings (misleading)\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nbarplot(approval$percent, names.arg = approval$year,\n        ylim = c(0, 100), col = \"steelblue\",\n        main = \"Approval Ratings (truthful)\")\n\n\n\n\n\n\n\n\n\n\n\n5.3.2 Example 2: Straw Poll Graphic\n\n\nCode\npoll &lt;- data.frame(candidate = c(\"A\", \"B\", \"C\", \"D\"),\n                   support = c(22, 18, 15, 10))\nbarplot(poll$support, names.arg = poll$candidate,\n        col = c(\"red\", \"blue\", \"green\", \"purple\"),\n        main = \"Poll Results (misleading)\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(ggplot2)\npoll |&gt; ggplot(aes(x = reorder(candidate, support), y = support)) +\n  geom_col(fill = \"steelblue\") +\n  coord_flip() +\n  labs(title = \"Poll Results (truthful)\",\n       x = \"Candidate\", y = \"Support (%)\")\n\n\n\n\n\n\n\n\n\n\n\n5.3.3 Example 3: Donut vs Bar Chart\n\n\nCode\nshares &lt;- data.frame(group = c(\"X\", \"Y\", \"Z\"), value = c(30, 50, 20))\nshares |&gt; ggplot(aes(x = 2, y = value, fill = group)) +\n  geom_col(width = 1, color = \"white\") +\n  coord_polar(theta = \"y\") +\n  xlim(0.5, 2.5) +\n  theme_void() +\n  labs(title = \"Shares (donut, misleading)\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nshares |&gt; ggplot(aes(x = group, y = value, fill = group)) +\n  geom_col() +\n  labs(title = \"Shares (bar chart)\",\n       x = NULL, y = \"Value\")\n\n\n\n\n\n\n\n\n\nPie charts (and donut charts, which are essentially pies with a hole in the middle) are widely criticized because humans are not good at accurately comparing angles or areas. Judgments based on angles are much less precise than those based on position or length. This makes pie charts poor at conveying quantitative comparisons, especially when slices are similar in size. Donut charts exacerbate the problem by removing the center, which eliminates a natural visual baseline (the full radius), making angle judgments even harder. For these reasons, most visualization experts recommend bar charts instead, where lengths aligned to a common baseline support more accurate comparisons.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "05-visual.html#good-practice",
    "href": "05-visual.html#good-practice",
    "title": "5  Data Visualization",
    "section": "5.4 Good Practice",
    "text": "5.4 Good Practice\n\n5.4.1 Bad Plots\n\nTruncated axes exaggerate differences.\n\n3D effects distort perception.\n\nPie/donut charts hinder comparisons.\n\nOverplotting or excessive colors obscure patterns.\n\nInconsistent scales or ordering confuse the audience.\n\n\n\n5.4.2 Good Plots\n\nStart bar charts at zero to preserve proportion.\n\nUse simple, clear chart types.\n\nProvide informative labels and titles.\n\nKeep scales and colors consistent.\n\nAvoid unnecessary clutter.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "05-visual.html#in-class-example",
    "href": "05-visual.html#in-class-example",
    "title": "5  Data Visualization",
    "section": "5.5 In-Class Example",
    "text": "5.5 In-Class Example\nConsider the data of Chetty et al. (2014).\n\nVisualize the relationship between social capital and absolute mobility. Do you see a correlation? Is it what you expected from the Chetty et al. (2014) study executive summary?\nAdd an aesthetic to your graph to represent whether the CZ is urban or not.\nSeparate urban and non-urban CZ’s into two separate plots.\nAdd a smooth fit to each of your plots above. Experiment with adding the option method=\"lm\" in your geom_smooth. What does this option do?\nWhich variables in the chetty data frame are appropriate x variables for a bar graph?\nMake two separate bar graphs for two different x variables.\nMake two more bar graphs that display proportions rather than counts of your selected variables.\nMake a bar graph that lets you compare the number of urban and rural CZ’s in each of the four regions.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "05-visual.html#summary",
    "href": "05-visual.html#summary",
    "title": "5  Data Visualization",
    "section": "5.6 Summary",
    "text": "5.6 Summary\nWe have explored both base R plotting and the ggplot2 grammar of graphics. Base R offers quick and simple plotting functions, but lacks consistency for more advanced tasks. ggplot2 provides a flexible and layered system, allowing us to build complex visualizations step by step. By studying both good and bad visualizations, we learn not only how to make effective charts but also how to critically evaluate visuals we encounter in practice.\n\n\n\n\nChetty, R., Hendren, N., Kline, P., & Saez, E. (2014). Where is the land of opportunity? The geography of intergenerational mobility in the United States. Quarterly Journal of Economics, 129(4), 1553–1623. https://doi.org/10.1093/qje/qju022\n\n\nWickham, H. (2016). ggplot2: Elegant graphics for data analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org\n\n\nWilkinson, L. (1999). The grammar of graphics. Springer-Verlag New York, Inc.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "exercises.html",
    "href": "exercises.html",
    "title": "6  Exercises",
    "section": "",
    "text": "Setting up the computing environment Using the right computing tools and environment is a prerequisite of data science projects. Set up your computer for this course with the following steps. For each step, document what you did, the obstacles you encountered, and how you overcame them. If you used AI, document your prompts. Note that the steps you take may depend on your computer’s operating system.Think of this as a user manual for students who are new to this. Use the command line interface.\n\nInstall R.\nInstall Positron or RStudio.\nInstall Quarto.\nSet up SSH authentication between your computer and your GitHub account.\nRender your homework into an HTML file.\nPrint the HTML file into a pdf file and put it into the release of this homework assignment.\n\nGetting familiar with command line interface The command line interface (CLI) is widely used among computing professionals, even though graphical user interfaces (GUI) are more common for everyday users. Be clear and concise in your explanations. Provide short examples if you think they will help illustrate your points.\n\nResearch and explain why many professionals prefer using the CLI over a GUI. Consider aspects such as efficiency, automation, reproducibility, or remote access.\nIdentify your top five favorite commands in the Unix/Linux shell. For each command, explain what it does. If there is an option/flag you found particularly useful, describe it.\nIdentify your top five favorite Git commands. For each command, explain what it does. If there is an option/flag you found particularly useful, describe it.\n\nDo women promote different policies than men? Chattopadhyay & Duflo (2004) studied whether female policymakers make different choices than male policymakers by exploiting a unique natural experiment in India. India’s 1993 constitutional amendment required that one-third of village council head positions (pradhans) be randomly reserved for women, creating a setting where the assignment of female leaders was exogenous. In the data here, villages were randomly assigned to have a female council head. The dataset is in the source of the class notes “data/india.csv”. As shown in Table 6.1, the dataset contains four variables.\n\n\n\nTable 6.1: Variables in india.csv\n\n\n\n\n\n\n\n\n\nvariable\ndescription\n\n\n\n\nvillage\nvillage identifier (“Gram Panchayat number _ village number”)\n\n\nfemale\nwhether village was assigned a female politician: 1 = yes, 0 = no\n\n\nwater\nnumber of new (or repaired) drinking water facilities in the village\n\n\n\nsince random assignment\n\n\nirrigation\nnumber of new (or repaired) irrigation facilities in the village\n\n\n\nsince random assignment\n\n\n\n\n\n\n\nUsing the correct R code, set your working directory.\nLoad the tidyverse package.\nLoad the data as a data.frame and assign the name india to it.\nUtilizing either head() or glimpse() view the first few rows of the dataset. Substantively describe what these functions do.\nWhat does each observation in this dataset represent?\nSubstantively interpret the first observation in the dataset.\nFor each variable in the dataset, identify the type of variable (character vs. numeric binary vs. numeric non-binary).\nHow many observations are in the dataset? In other words, how many villages were part of this experiment? Additionally, provide a substantive answer.\n\nLand of Opportunity in the US Chetty et al. (2014) show that children’s chances of rising out of poverty in the U.S. vary sharply across commuting zones, with higher mobility in areas with less segregation, less inequality, stronger schools, more two-parent families, and greater social capital. The data and its variable dictionary are available as data/Chetty_2014.csv and data/Chetty_2014_dict.csv. Here we look into a subset of the data, exploring the relationship between economic mobility and CZ characteristics: household income per capita (hhi_percap). The mobility measure that you will use in this analysis captures the probability that a child born to a parent in quintile 1 moves to income quintile 5 as an adult (prob_q1q5).\n\nRead and filter data to get data only for the 100 largest commuting zones (CZ). You will work with filtered data, chetty_top100, throughout this lab.\nMake a scatterplot with household income per capita (hhi_percap) on the x-axis, and mobility (abs_mobility) on the y-axis. (A) Describe the graph: what is the approximate range of the x-axis? (B) What is the approximate range of the y-axis? (C) Do you think there is a relationship between these two variables?\nUse color to represent the geographic region (region) to your scatterplot. (A) What patterns does this reveal? (B) Describe the distribution of the data, by region.\nRepresent geographic region (region) on your scatterplot using shape instead of color. Compare the use of color vs shape to represent the region: what are the benefits and drawbacks of each?\nGoing back to the graph you just made, which uses color to represent the geographic region, add another aesthetic to represent the size of the population (pop_2000, population from the 2000 Census). Describe any relationships between size and region.\nSplit your plot into facets to display scatterplots of your data by region. (A) Compare this split plot to the combined plot earlier. Are there aspects of the relationship between hhi_percap and mobility that are easier to detect in the faceted plot than in the combined plot? (B) Which regions appear to have a relatively stronger relationship between hhi_percap and mobility?\nAdd information on the census division (division) to your graph using the color aesthetic. (A) What does this reveal about divisional differences in the West?\nCreate a plot of the relationship between hhi_percap and abs_mobility with two layers: (1) A scatterplot colored by region, and (2) a smooth fit chart with no standard error also colored by region. (A) What patterns does this illustrate in the data?\nCreate a bar graph that displays the count of CZs by region and fill each bar using information on census division. What do you learn from this graph? (A) Make new bar graphs with position dodge. (B) Make new bar graphs with position fill.\n\n\nWhat is the relative advantage of each of the three bar graphs?\n\nConnecticut Schools Data on schools from the Common Core of Data (CCD) are collected by the National Center for Education Statistics. Information about the CCD can be found here. We are working with a subset of the 2013-14 dataset, data/ct_schools in the classnotes repo. A variable codebook for the CCD, which will explain what each column represents in the data file is located in the flat file in the record layout column and 2013-14 row.\n\nLoad the appropriate packages and load the data.\nData manipulation.\n\nMake a new variable sch_type that has the value Charter, Magnet or TPS, to specify if the school is a charter, magnet or traditional public school.\nHow many schools of each of these three types are in our area?\nMake a table that show the number of schools of each of the three school types that are missing data for free lunch.\n\nDescriptives.\n\nHow many schools are elementary schools? Middle schools? High schools? Other? Missing?\nHow many schools are eligible for Title I status? Summarize the count of schools in each category\n\n\nRacial composition.\n\nCreate new variables that compute the percentage of students who are Black, White, Hispanic, Asian or another race (call this variable “other”), and the percentage of students receiving free OR reduced price lunch.\nVisualize these data to see the variability of each of these variables (Hint: Use geom_histogram).\n\nVisualize the variation in the percent of students receiving free lunch (frelch) for magnet schools, TPS, and charter schools (Hint: Use geom_boxplot).\nVisualize the variation in the percent of students of each race and ethnicity in the data file (Black, White, Hispanic, Asian and Other) for each of the type of schools (magnet, TPS and charter).\nWith more R skills what types of questions could you answer using this dataset?\nWhat are some questions you have about this dataset? What information would you add to the dataset, if you could?\n\n\n\n\n\n\nChattopadhyay, R., & Duflo, E. (2004). Women as policy makers: Evidence from a randomized policy experiment in india. Econometrica, 72(5), 1409–1443. https://doi.org/10.1111/j.1468-0262.2004.00539.x\n\n\nChetty, R., Hendren, N., Kline, P., & Saez, E. (2014). Where is the land of opportunity? The geography of intergenerational mobility in the United States. Quarterly Journal of Economics, 129(4), 1553–1623. https://doi.org/10.1093/qje/qju022",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Exercises</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Chattopadhyay, R., & Duflo, E. (2004). Women as policy makers:\nEvidence from a randomized policy experiment in india.\nEconometrica, 72(5), 1409–1443. https://doi.org/10.1111/j.1468-0262.2004.00539.x\n\n\nChetty, R., Hendren, N., Kline, P., & Saez, E. (2014). Where is the\nland of opportunity? The geography of intergenerational mobility in the\nUnited States. Quarterly Journal of\nEconomics, 129(4), 1553–1623. https://doi.org/10.1093/qje/qju022\n\n\nVanderPlas, J. (2016). Python data science handbook:\nEssential tools for working with data. O’Reilly Media,\nInc.\n\n\nWickham, H. (2016). ggplot2: Elegant\ngraphics for data analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org\n\n\nWilkinson, L. (1999). The grammar of graphics. Springer-Verlag\nNew York, Inc.",
    "crumbs": [
      "References"
    ]
  }
]